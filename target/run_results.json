{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.9", "generated_at": "2024-12-08T11:40:54.599020Z", "invocation_id": "48b0f291-19d0-4a1a-9c61-342eb13fdcb9", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-08T11:40:52.116049Z", "completed_at": "2024-12-08T11:40:52.137156Z"}, {"name": "execute", "started_at": "2024-12-08T11:40:52.138397Z", "completed_at": "2024-12-08T11:40:52.417289Z"}], "thread_id": "Thread-1", "execution_time": 0.30535435676574707, "adapter_response": {"_message": "INSERT 0 5", "code": "INSERT", "rows_affected": 5}, "message": "INSERT 0 5", "failures": null, "unique_id": "model.jaffle_shop.locations", "compiled": true, "compiled_code": "with\n\nlocations as (\n\n    select * from  \"gaussdb\".\"jaffle_shop\".\"stg_locations\"\n\n)\n\nselect * from locations", "relation_name": "\"gaussdb\".\"jaffle_shop\".\"locations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-08T11:40:52.430939Z", "completed_at": "2024-12-08T11:40:52.519758Z"}, {"name": "execute", "started_at": "2024-12-08T11:40:52.520980Z", "completed_at": "2024-12-08T11:40:52.700509Z"}], "thread_id": "Thread-1", "execution_time": 0.2734100818634033, "adapter_response": {"_message": "INSERT 0 3651", "code": "INSERT", "rows_affected": 3651}, "message": "INSERT 0 3651", "failures": null, "unique_id": "model.jaffle_shop.metricflow_time_spine", "compiled": true, "compiled_code": "-- metricflow_time_spine.sql\nwith\n\ndays as (\n\n    --for BQ adapters use \"DATE('01/01/2000','mm/dd/yyyy')\"\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3651.0\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    \n\n    cast(cast(\n    cast(now() as timestamp)\n        at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp\n) as date) + ((interval '1 day') * (-3650))\n\n + ((interval '1 day') * ((row_number() over (order by 1) - 1)))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast(\n\n    cast(cast(\n    cast(now() as timestamp)\n        at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp\n) as date) + ((interval '1 day') * (1))\n\n as date)\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as timestamp) as date_day\nfrom\n    date_spine d\n\n\n\n),\n\ncast_to_date as (\n\n    select cast(date_day::text as date) as date_day\n\n    from days\n\n)\n\nselect * from cast_to_date", "relation_name": "\"gaussdb\".\"jaffle_shop\".\"metricflow_time_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-08T11:40:52.711046Z", "completed_at": "2024-12-08T11:40:52.721669Z"}, {"name": "execute", "started_at": "2024-12-08T11:40:52.722749Z", "completed_at": "2024-12-08T11:40:53.116996Z"}], "thread_id": "Thread-1", "execution_time": 0.4096071720123291, "adapter_response": {"_message": "INSERT 0 90899", "code": "INSERT", "rows_affected": 90899}, "message": "INSERT 0 90899", "failures": null, "unique_id": "model.jaffle_shop.order_items", "compiled": true, "compiled_code": "with\n\norder_items as (\n\n    select * from \"gaussdb\".\"jaffle_shop\".\"stg_order_items\"\n\n),\n\n\norders as (\n\n    select * from   \"gaussdb\".\"jaffle_shop\".\"stg_orders\"\n\n),\n\nproducts as (\n\n    select * from \"gaussdb\".\"jaffle_shop\".\"stg_products\"\n\n),\n\nsupplies as (\n\n    select * from  \"gaussdb\".\"jaffle_shop\".\"stg_supplies\"\n\n),\n\norder_supplies_summary as (\n\n    select\n        product_id,\n\n        sum(supply_cost) as supply_cost\n\n    from supplies\n\n    group by 1\n\n),\n\njoined as (\n\n    select\n        order_items.*,\n\n        orders.ordered_at,\n\n        products.product_name,\n        products.product_price,\n        products.is_food_item,\n        products.is_drink_item,\n\n        order_supplies_summary.supply_cost\n\n    from order_items\n\n    left join orders on order_items.order_id = orders.order_id\n\n    left join products on order_items.product_id = products.product_id\n\n    left join order_supplies_summary\n        on order_items.product_id = order_supplies_summary.product_id\n\n)\n\nselect * from joined", "relation_name": "\"gaussdb\".\"jaffle_shop\".\"order_items\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-08T11:40:53.127907Z", "completed_at": "2024-12-08T11:40:53.139574Z"}, {"name": "execute", "started_at": "2024-12-08T11:40:53.140706Z", "completed_at": "2024-12-08T11:40:53.256346Z"}], "thread_id": "Thread-1", "execution_time": 0.13212203979492188, "adapter_response": {"_message": "INSERT 0 9", "code": "INSERT", "rows_affected": 9}, "message": "INSERT 0 9", "failures": null, "unique_id": "model.jaffle_shop.products", "compiled": true, "compiled_code": "with\n\nproducts as (\n\n    select * from  \"gaussdb\".\"jaffle_shop\".\"stg_products\"\n\n)\n\nselect * from products", "relation_name": "\"gaussdb\".\"jaffle_shop\".\"products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-08T11:40:53.266929Z", "completed_at": "2024-12-08T11:40:53.278821Z"}, {"name": "execute", "started_at": "2024-12-08T11:40:53.279925Z", "completed_at": "2024-12-08T11:40:53.395574Z"}], "thread_id": "Thread-1", "execution_time": 0.13234686851501465, "adapter_response": {"_message": "INSERT 0 64", "code": "INSERT", "rows_affected": 64}, "message": "INSERT 0 64", "failures": null, "unique_id": "model.jaffle_shop.supplies", "compiled": true, "compiled_code": "with\n\nsupplies as (\n\n    select * from  \"gaussdb\".\"jaffle_shop\".\"stg_supplies\"\n\n)\n\nselect * from supplies", "relation_name": "\"gaussdb\".\"jaffle_shop\".\"supplies\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-08T11:40:53.406207Z", "completed_at": "2024-12-08T11:40:53.419114Z"}, {"name": "execute", "started_at": "2024-12-08T11:40:53.420244Z", "completed_at": "2024-12-08T11:40:54.100314Z"}], "thread_id": "Thread-1", "execution_time": 0.6977977752685547, "adapter_response": {"_message": "INSERT 0 61947", "code": "INSERT", "rows_affected": 61947}, "message": "INSERT 0 61947", "failures": null, "unique_id": "model.jaffle_shop.orders", "compiled": true, "compiled_code": "with\n\norders as (\n\n    select * from  \"gaussdb\".\"jaffle_shop\".\"stg_orders\"\n\n),\n\norder_items as (\n\n    select * from \"gaussdb\".\"jaffle_shop\".\"order_items\"\n\n),\n\norder_items_summary as (\n\n    select\n        order_id,\n\n        sum(supply_cost) as order_cost,\n        sum(product_price) as order_items_subtotal,\n        count(order_item_id) as count_order_items,\n        sum(\n            case\n                when is_food_item then 1\n                else 0\n            end\n        ) as count_food_items,\n        sum(\n            case\n                when is_drink_item then 1\n                else 0\n            end\n        ) as count_drink_items\n\n    from order_items\n\n    group by 1\n\n),\n\ncompute_booleans as (\n\n    select\n        orders.*,\n\n        order_items_summary.order_cost,\n        order_items_summary.order_items_subtotal,\n        order_items_summary.count_food_items,\n        order_items_summary.count_drink_items,\n        order_items_summary.count_order_items,\n        order_items_summary.count_food_items > 0 as is_food_order,\n        order_items_summary.count_drink_items > 0 as is_drink_order\n\n    from orders\n\n    left join\n        order_items_summary\n        on orders.order_id = order_items_summary.order_id\n\n),\n\ncustomer_order_count as (\n\n    select\n        *,\n\n        row_number() over (\n            partition by customer_id\n            order by ordered_at asc\n        ) as customer_order_number\n\n    from compute_booleans\n\n)\n\nselect * from customer_order_count", "relation_name": "\"gaussdb\".\"jaffle_shop\".\"orders\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-08T11:40:54.111485Z", "completed_at": "2024-12-08T11:40:54.120795Z"}, {"name": "execute", "started_at": "2024-12-08T11:40:54.121885Z", "completed_at": "2024-12-08T11:40:54.529112Z"}], "thread_id": "Thread-1", "execution_time": 0.42131876945495605, "adapter_response": {"_message": "INSERT 0 934", "code": "INSERT", "rows_affected": 934}, "message": "INSERT 0 934", "failures": null, "unique_id": "model.jaffle_shop.customers", "compiled": true, "compiled_code": "with\n\ncustomers as (\n\n    select * from \"gaussdb\".\"jaffle_shop\".\"stg_customers\"\n\n),\n\norders as (\n\n    select * from \"gaussdb\".\"jaffle_shop\".\"orders\"\n\n),\n\ncustomer_orders_summary as (\n\n    select\n        orders.customer_id,\n\n        count(distinct orders.order_id) as count_lifetime_orders,\n        count(distinct orders.order_id) > 1 as is_repeat_buyer,\n        min(orders.ordered_at) as first_ordered_at,\n        max(orders.ordered_at) as last_ordered_at,\n        sum(orders.subtotal) as lifetime_spend_pretax,\n        sum(orders.tax_paid) as lifetime_tax_paid,\n        sum(orders.order_total) as lifetime_spend\n\n    from orders\n\n    group by 1\n\n),\n\njoined as (\n\n    select\n        customers.*,\n\n        customer_orders_summary.count_lifetime_orders,\n        customer_orders_summary.first_ordered_at,\n        customer_orders_summary.last_ordered_at,\n        customer_orders_summary.lifetime_spend_pretax,\n        customer_orders_summary.lifetime_tax_paid,\n        customer_orders_summary.lifetime_spend,\n\n        case\n            when customer_orders_summary.is_repeat_buyer then 'returning'\n            else 'new'\n        end as customer_type\n\n    from customers\n\n    left join customer_orders_summary\n        on customers.customer_id = customer_orders_summary.customer_id\n\n)\n\nselect * from joined", "relation_name": "\"gaussdb\".\"jaffle_shop\".\"customers\""}], "elapsed_time": 2.805178642272949, "args": {"print": true, "partial_parse_file_diff": true, "write_json": true, "select": [], "log_format_file": "debug", "log_level_file": "debug", "version_check": true, "use_colors_file": true, "populate_cache": true, "which": "run", "warn_error_options": {"include": [], "exclude": []}, "cache_selected_only": false, "enable_legacy_logger": false, "printer_width": 80, "favor_state": false, "debug": true, "require_explicit_package_overrides_for_builtin_materializations": true, "quiet": false, "profiles_dir": "/opt/cyl/jaffle-shop-dws", "log_path": "/opt/cyl/jaffle-shop-dws/logs", "introspect": true, "strict_mode": false, "project_dir": "/opt/cyl/jaffle-shop-dws", "indirect_selection": "eager", "partial_parse": true, "exclude": [], "show_resource_report": false, "log_level": "info", "invocation_command": "dbt run -d --print", "log_file_max_bytes": 10485760, "use_colors": true, "defer": false, "vars": {}, "log_format": "default", "send_anonymous_usage_stats": true, "source_freshness_run_project_hooks": false, "empty": false, "static_parser": true, "macro_debugging": false, "require_resource_names_without_spaces": false}}